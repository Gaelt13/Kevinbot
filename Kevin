import discord
from discord.ext import commands
from discord.ui import View, Button, Modal, TextInput
import asyncio

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.voice_states = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)

canales_temporales = {}  # canal_id: user_id

@bot.event
async def on_ready():
    print(f'✅ Bot conectado como {bot.user}')

class CanalControlView(View):
    def __init__(self, canal, autor_id):
        super().__init__(timeout=None)
        self.canal = canal
        self.autor_id = autor_id

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.user.id == self.autor_id or interaction.user.guild_permissions.administrator:
            return True
        await interaction.response.send_message("❌ Solo el creador del canal o un admin puede usar estos botones.", ephemeral=True)
        return False

    # Cambiar el límite de usuarios
    @discord.ui.button(label="👥 Límite: 2", style=discord.ButtonStyle.primary)
    async def limite_2(self, interaction: discord.Interaction, button: Button):
        await self.canal.edit(user_limit=2)
        await interaction.response.send_message("🔧 Límite de usuarios establecido en 2.", ephemeral=True)

    @discord.ui.button(label="👥 Límite: 4", style=discord.ButtonStyle.primary)
    async def limite_4(self, interaction: discord.Interaction, button: Button):
        await self.canal.edit(user_limit=4)
        await interaction.response.send_message("🔧 Límite de usuarios establecido en 4.", ephemeral=True)

    @discord.ui.button(label="👥 Límite: 8", style=discord.ButtonStyle.primary)
    async def limite_8(self, interaction: discord.Interaction, button: Button):
        await self.canal.edit(user_limit=8)
        await interaction.response.send_message("🔧 Límite de usuarios establecido en 8.", ephemeral=True)

    # Eliminar canal
    @discord.ui.button(label="❌ Eliminar canal", style=discord.ButtonStyle.danger)
    async def eliminar(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("🗑️ Canal eliminado.", ephemeral=True)
        await self.canal.delete()
        canales_temporales.pop(self.canal.id, None)

    # Renombrar canal
    @discord.ui.button(label="📝 Renombrar canal", style=discord.ButtonStyle.secondary)
    async def renombrar(self, interaction: discord.Interaction, button: Button):
        await interaction.response.send_message("Por favor, ingresa un nuevo nombre para el canal:", ephemeral=True)
        modal = RenombrarModal(self.canal)
        await interaction.response.send_modal(modal)

    # Transferir propiedad
    @discord.ui.button(label="🔄 Transferir propiedad", style=discord.ButtonStyle.secondary)
    async def transferir(self, interaction: discord.Interaction, button: Button):
        if not self.canal.members:
            await interaction.response.send_message("❌ No hay usuarios en el canal para transferir.", ephemeral=True)
            return
        user_list = [member.name for member in self.canal.members]
        user_str = '\n'.join(user_list)
        await interaction.response.send_message(f"Selecciona un usuario para transferir la propiedad:\n{user_str}", ephemeral=True)

class RenombrarModal(Modal):
    def __init__(self, canal):
        super().__init__(title="Renombrar canal")
        self.canal = canal
        self.add_item(TextInput(label="Nuevo nombre del canal", placeholder="Escribe el nuevo nombre aquí..."))

    async def callback(self, interaction: discord.Interaction):
        new_name = self.children[0].value
        await self.canal.edit(name=new_name)
        await interaction.response.send_message(f"🔧 El canal ha sido renombrado a: {new_name}", ephemeral=True)

@bot.command()
async def ayuda(ctx):
    """Muestra los comandos disponibles"""
    embed = discord.Embed(title="Comandos del Bot", description="Aquí están los comandos disponibles:", color=discord.Color.blue())
    embed.add_field(name="!crearvoz", value="Crea un canal de voz temporal y te da control sobre él.", inline=False)
    embed.add_field(name="!ayuda", value="Muestra esta ayuda.", inline=False)
    await ctx.send(embed=embed)

@bot.command()
async def crearvoz(ctx):
    """Crea un canal de voz temporal con la posibilidad de controlarlo."""
    nombre_usuario = ctx.author.display_name
    nombre_canal = f"Sala de {nombre_usuario}"

    # Definir permisos
    overwrites = {
        ctx.guild.default_role: discord.PermissionOverwrite(connect=True, view_channel=True),
        ctx.author: discord.PermissionOverwrite(manage_channels=True, move_members=False),
    }

    # Dar permisos a roles que sean administradores
    for rol in ctx.guild.roles:
        if rol.permissions.administrator:
            overwrites[rol] = discord.PermissionOverwrite(manage_channels=True, move_members=True)

    canal = await ctx.guild.create_voice_channel(nombre_canal, overwrites=overwrites)
    canales_temporales[canal.id] = ctx.author.id

    # Crear embed para mostrar detalles
    embed = discord.Embed(title="Nuevo Canal de Voz", description=f"Se ha creado el canal **{nombre_canal}**.", color=discord.Color.green())
    embed.add_field(name="Creador", value=ctx.author.mention, inline=False)
    embed.add_field(name="Opciones", value="Usa los botones abajo para gestionar el canal.", inline=False)

    # Enviar el embed con los botones
    view = CanalControlView(canal, ctx.author.id)
    await ctx.send(embed=embed, view=view)

    # Mover al creador si está conectado
    if ctx.author.voice:
        await ctx.author.move_to(canal)
        await ctx.send(f'🔊 {ctx.author.mention} ha sido movido al canal.')

    # Borra el mensaje de comando
    try:
        await ctx.message.delete()
    except discord.Forbidden:
        pass

@bot.event
async def on_voice_state_update(member, before, after):
    # Si alguien sale de un canal de voz temporal
    if before.channel and before.channel.id in canales_temporales:
        if len(before.channel.members) == 0:
            await asyncio.sleep(3)
            if len(before.channel.members) == 0:
                await before.channel.delete()
                canales_temporales.pop(before.channel.id, None)
                print(f'🗑️ Canal eliminado: {before.channel.name}')
